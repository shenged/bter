{
  "name": "bter",

  "version": "0.0.4",

  "description": "simple bter client",
  "main": "./lib/bter",
  "dependencies": {
    "nonce": "~1.0.3",
    "request": "~2.33.0"
  },
  "devDependencies": {
    "grunt": "~0.4.2",
    "nodeunit": "~0.8.4",
    "grunt-contrib-jshint": "~0.8.0",
    "grunt-contrib-nodeunit": "~0.3.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/opfl/bter.git"
  },
  "keywords": [
    "bter",
    "bitcoin",
    "exchange",
    "doge",
    "btc"
  ],
  "author": {
    "name": "opfl"
  },
  "license": "MIT",

  "readme": "# bter\r\nBTER.com API wrapper\r\n\r\n## Installation\r\n    $ npm install bter\r\n\r\n## Tests\r\n    $ grunt test\r\n\r\n## Examples\r\n\r\n```javascript\r\n\tvar bter = require('bter');\r\n\r\n\tvar API_KEY = 'YOUR_API_KEY', SECRET_KEY = 'YOUR_SECRET_KEY';\r\n\r\n\t// Gets all pairs available\r\n\tbter.getAllPairs(function(err, result) {\r\n\t\tif(err) throw err;\r\n\t\tconsole.log(result);\r\n\t});\r\n\t\r\n\t// Gets all ticker information for the given pair\r\n\tbter.getTicker({ CURR_A: 'doge', CURR_B: 'btc' }, function(err, result) {\r\n\t\tif(err) throw err;\r\n\t\tconsole.log(result);\r\n\t});\r\n\t\r\n\t// Gets all market depth including buy/ask orders\r\n\tbter.getDepth({ CURR_A: 'doge', CURR_B: 'btc' }, function(err, result) {\r\n\t\tif(err) throw err;\r\n\t\tconsole.log(result);\r\n\t});\r\n\t\r\n\t// Gets the 80 most recent trade orders\r\n\tbter.getHistory({ CURR_A: 'doge', CURR_B: 'btc' }, function(err, result) {\r\n\t\tif(err) throw err;\r\n\t\tconsole.log(result);\r\n\t});\r\n\t\r\n\t// Gets the current balance of the account\r\n\tbter.getFunds({ API_KEY: API_KEY, SECRET_KEY: SECRET_KEY }, function(err, result) {\r\n\t\tif(err) throw err;\r\n\t\tconsole.log(result);\r\n\t});\r\n\t\r\n\t// Places a new order (buy or sell)\r\n\tbter.placeOrder({ API_KEY: API_KEY, SECRET_KEY: SECRET_KEY, PAIR: 'doge_btc', TYPE: 'SELL', RATE: '0.00000225', AMOUNT: '300000' },\r\n\t\tfunction(err, result) {\r\n\t\t\tif(err) throw err;\r\n\t\t\tconsole.log(result);\r\n\t\t});\r\n\r\n\t// Cancels an open order\r\n\tbter.cancelOrder({ API_KEY: API_KEY, SECRET_KEY: SECRET_KEY, ORDER_ID: 9395299 }, function(err, result) {\r\n\t\tif(err) throw err;\r\n\t\tconsole.log(result);\r\n\t});\r\n\t\r\n\t// Gets the status of the given order\r\n\tbter.getOrderStatus({ API_KEY: API_KEY, SECRET_KEY: SECRET_KEY, ORDER_ID: 9395299 }, function(err, result) {\r\n\t\tif(err) throw err;\r\n\t\tconsole.log(result);\r\n\t});\r\n\r\n\t// Gets the entire open order list\r\n\tbter.getOrderList({ API_KEY: API_KEY, SECRET_KEY: SECRET_KEY }, function(err, result) {\r\n\t\tif(err) throw err;\r\n\t\tconsole.log(result);\r\n\t});\r\n```\r\n\r\n## API\r\n### .getAllPairs(callback)\r\nThis function returns all ticker pairs supported by the BTER API\r\n\r\n### .getTicker(options, callback)\r\nThis function returns ticker information for the given pair. It \r\nrequires two options, CURR_A and CURR_B. See above for an example.\r\n\r\n### .getDepth(options, callback)\r\nThis function returns the market depth for the given pair including\r\nbuy/sell orders. It requires two options, CURR_A and CURR_B. \r\nSee above for an example.\r\n\r\n### .getHistory(options, callback)\r\nThis function returns the last 80 recent trade orders for the given pair. It \r\nrequires two options, CURR_A and CURR_B. TID is optional. See above for an example.\r\n\r\n### .getFunds(options, callback)\r\nThis function returns the current funds available on the account. It \r\nrequires two options, API_KEY and SECRET_KEY. See above for an example.\r\n\r\n### .placeOrder(options, callback)\r\nThis function places a new buy/sell order for the account. It \r\nrequires six options, API_KEY, SECRET_KEY, PAIR, TYPE, RATE, AMOUNT. See above for an example.\r\n\r\n### .cancelOrder(options, callback)\r\nThis function cancels an open order. It requires three options, \r\nAPI_KEY, SECRET_KEY, and ORDER_ID. See above for an example.\r\n\r\n### .getOrderStatus(options, callback)\r\nThis function queries the status on an open order. It requires three options, \r\nAPI_KEY, SECRET_KEY, and ORDER_ID. See above for an example.\r\n\r\n### .getOrderList(options, callback)\r\nThis function returns all open orders on the account. It requires two options, \r\nAPI_KEY, and SECRET_KEY. See above for an example.\r\n\r\nFor more detailed information, refer to https://bter.com/api\r\n\r\n## TODO\r\n- Finish tests that require API/SECRET key\r\n\r\n## License\r\nCopyright (c) 2014 OPFL\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n\r\n## Donations \r\nBTC: 16x2x5wWveFwwYDtZ1V5jxjssu51uVbH1U\r\nDOGE: DAc7HLRpVhLTQ4qHrNDYAFKEUs1LKsFu4N\r\n",

  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/opfl/bter/issues"
  },
  "homepage": "https://github.com/opfl/bter",
  "_id": "bter@0.0.4",
  "_from": "bter@*"

}
